package com.lsy.code.demo.jsp;

/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2020-03-12 03:23:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class regist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t\t<title>注册</title>\r\n");
      out.write("\t\t<style type=\"text/css\">\r\n");
      out.write("\t\t\t.form-sub1 {\r\n");
      out.write("\t\t\t\tmargin-top: 10px;\r\n");
      out.write("\t\t\t\tmargin-bottom: 10px;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t</style>\r\n");
      out.write("\t\t<script type=\"text/javascript\" src=\"./js/utils.js\"></script>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<form action=\"/JavaEE/jsp/demo/login.jsp\" method=\"post\" id=\"registForm\" onsubmit=\"return checkUserTip();\">\r\n");
      out.write("\t\t\t<div class=\"form-sub1\" id=\"check-username\">\r\n");
      out.write("\t\t\t\t<label for=\"username\">用户名：</label>\r\n");
      out.write("\t\t\t\t<input type=\"text\" required=\"required\" name=\"username\" value=\"\" id=\"username\" />\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"form-sub1\">\r\n");
      out.write("\t\t\t\t<label for=\"password\">登录密码：</label>\r\n");
      out.write("\t\t\t\t<input type=\"password\" required=\"required\" name=\"password\" value=\"\" id=\"password\" />\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div id=\"tip1\" style=\"display: none;\"><b style=\"color: red;\">用户名、密码不可为空</b></div>\r\n");
      out.write("\t\t\t<div class=\"form-sub1\">\r\n");
      out.write("\t\t\t\t<input type=\"submit\" value=\"提交\" />\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\t//异步校验用户名是否存在\r\n");
      out.write("\t\t\tUtils.on(document.getElementById(\"username\"), \"blur\", function() {\r\n");
      out.write("\t\t\t\tvar node = '';\r\n");
      out.write("\t\t\t\tif (Utils.strIsBlank(this.value)) {\r\n");
      out.write("\t\t\t\t\tnode = document.createTextNode(\"请输入正确的用户名。\");\r\n");
      out.write("\t\t\t\t\tcheckNameTip(node);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t//异步校验\r\n");
      out.write("\t\t\t\t\tUtils.async(\"post\", {\r\n");
      out.write("\t\t\t\t\t\tusername: this.value\r\n");
      out.write("\t\t\t\t\t}, \"/JavaEE/user?method=checkNameRegist\", function(data) {\r\n");
      out.write("\t\t\t\t\t\tif(200!=data.code){\r\n");
      out.write("\t\t\t\t\t\t\tnode = document.createTextNode(data.msg);\r\n");
      out.write("\t\t\t\t\t\t\tcheckNameTip(node);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}, true,'json');\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//校验是否存在，存在则阻止表单提交\r\n");
      out.write("\t\t\tfunction checkUserTip() {\r\n");
      out.write("\t\t\t\tvar flag=true;\r\n");
      out.write("\t\t\t\tvar formData = new FormData(document.getElementById(\"registForm\"));\r\n");
      out.write("\t\t\t\tUtils.async(\"post\", convert_FormData_to_json(formData), \"/JavaEE/user?method=checkNameRegist\", function(data) {\r\n");
      out.write("\t\t\t\t\tif(200!=data.code){\r\n");
      out.write("\t\t\t\t\t\tflag=false;//阻止表单提交\r\n");
      out.write("\t\t\t\t\t\tvar tip1 = document.getElementById(\"tip1\");\r\n");
      out.write("\t\t\t\t\t\ttip1.style.display=\"\";\r\n");
      out.write("\t\t\t\t\t\ttip1.innerHTML='<b style=\"color: red;\">'+data.msg+'</b>';\r\n");
      out.write("\t\t\t\t\t\t//隐藏提示\r\n");
      out.write("\t\t\t\t\t\tsetTimeout(function() {\r\n");
      out.write("\t\t\t\t\t\t\ttip1.style.display=\"none\";\r\n");
      out.write("\t\t\t\t\t\t}, 1500);\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},false, 'json');\r\n");
      out.write("\t\t\t\treturn flag;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction checkNameTip(node) {\r\n");
      out.write("\t\t\t\t//创建元素，并显示\r\n");
      out.write("\t\t\t\tvar newSubE = document.createElement(\"b\");\r\n");
      out.write("\t\t\t\tnewSubE.style = 'color: red;';\r\n");
      out.write("\t\t\t\tnewSubE.appendChild(node);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tvar parentE = document.getElementById(\"check-username\");\r\n");
      out.write("\t\t\t\tvar exitSubE = document.getElementById(\"username\");\r\n");
      out.write("\t\t\t\tparentE.appendChild(newSubE, exitSubE);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t//1s删除新创建的元素\r\n");
      out.write("\t\t\t\tsetTimeout(function() {\r\n");
      out.write("\t\t\t\t\tparentE.removeChild(newSubE);\r\n");
      out.write("\t\t\t\t}, 1500);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

